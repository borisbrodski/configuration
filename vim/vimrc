set hidden
" Mapping overview
" <leader>n   -  NERDTree
" Alt-n       -  NERDTreeFind
" Ctrl-n      -  multi-cursor
" F1/S-F1     -  cn/cp
" F3          -  indent lines toggle
" F4          -  taglist toggle
" Shift-F4    -  taglist update
" F9          -  undo tree
"
" Space       -  smart-space.vim
"
"
" <leader>ev  - edit .vimrc
" <leader>et  - edit ~/Desktop/TODO.txt
" <leader>es  - edit ~/.dbext.sql
" <leader>da  - delete alternative buffer
" <leader>ot  - open tag list
"
" <leader>y   - copy to the system clipboard
" <leader>p   - paste from the system clipboard
"
" Fs/Fi/Fd    - fold search
"
"
" Ctrl-Shift-Space - Change language
"
" DrawIt
"   -di       - Start
"   -ds       - Stop
"   -b, -e, -l, ...


if !exists("g:reload_count")
  let g:reload_count=1
else
  let g:reload_count+=1
endif
let g:pathogen_disabled = []

let $LANG='C'
if has('win32')
  language english
  set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
else
  language en_US.UTF-8
endif
set langmenu=en_US.UTF-8

if !empty(glob("$HOME/.vimrc_local-before"))
  source $HOME/.vimrc_local-before
endif

let mapleader="-"
let maplocalleader="ä"

execute pathogen#infect()
Helptags
if g:reload_count == 1
  " BUG? Reexecuting this turns syntax highlighting off
  syntax enable
endif

if has('gui_running')
  colorscheme solarized
  " set guioptions-=T  " no toolbar
  if has('win32')
    set encoding=UTF-8
    au GUIEnter * simalt ~x
  endif
  set background=dark
  hi CursorLine guibg=#002b36
  hi Normal guibg=#001618
  set cursorline
else
  set background=light
endif
filetype plugin indent on

" TEST IT
set encoding=UTF-8


" Set GUI font
" :redir @a
" :set gfn?
" :redir END
if has('win32')
  "set guifont=Consolas:h11:cANSI
  "set guifont=Droid_Sans_Mono_Dotted_for_Powe:h11:cANSI
  set guifont=DejaVu_Sans_Mono_for_Powerline:h10:cANSI
  "set guifont=Hack:h11:cANSI
endif
noremap <silent> <leader>n :NERDTreeToggle<cr>
noremap <silent> <M-n> :NERDTreeFind<cr>

let g:NERDTreeIndicatorMap = {
	\ "Modified"  : ">",
	\ "Staged"    : "*",
	\ "Untracked" : "?",
	\ "Renamed"   : "=",
	\ "Unmerged"  : "#",
	\ "Deleted"   : "-",
	\ "Dirty"     : ">",
	\ "Clean"     : "$",
	\ "Unknown"   : "."
	\ }


if has("persistent_undo")
    set undodir='~/.vim/undodir/'
    set undofile
endif

if has('win32')
	set fileformats=dos
endif
set diffopt+=iwhite

set showmatch " Show matching brackets.
set ignorecase " Search ignoring case
set smartcase " Do smart case matching
set hlsearch
set incsearch
"set hidden

set mouse=a
set showcmd
set ruler
set laststatus=2
"set statusline=%F%m%r%h%w\ [%{&ff},%{&fileencoding}][%Y][\%03.3b,0x\%02.2B][%l/%L,%v]%p%%
set tag+=../tags
set nostartofline " leave my cursor where it was
set scrolloff=5 " Keep 5 lines (top/bottom) for scope
set showcmd " show the command being typed
set sidescrolloff=5 " Keep 5 lines at the size
"set lazyredraw " do not redraw while running macros
set wildchar=<Tab> wildmenu wildmode=full
set fileencodings+=utf-8,cp1252,latin1
set backspace=indent,eol,start
set history=1000
set matchpairs+=<:>
set modeline
set modelines=5
set number
set ttimeoutlen=50

"set ssop-=folds      " do not store folds in the session

set backupdir=~/vimtmp,.
set directory=~/vimtmp,.

let g:tex_flavor='tex'

"set viewdir=~\.vim\views\   " Cause indent STOP working. VIM BUG??

nnoremap <silent> <c-right> :bn<cr>
nnoremap <silent> <c-left> :bp<cr>
"inoremap <TAB> <ESC>

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1


if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols

" powerline symbols
let g:airline_left_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.crypt = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = 'Ξ'
let g:airline_symbols.notexists = 'Σ'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.readonly = ''
let g:airline_symbols.spell = 'Ω'
let g:airline_symbols.whitespace = '·'

let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

fun! MyAirLine_DBProfile()
  return dbext#DB_listOption("profile")
endfun
call airline#parts#define_function('db-profile', 'MyAirLine_DBProfile')
call airline#parts#define_minwidth('db-profile', 10)
call airline#parts#define_condition('db-profile', 'dbext#DB_listOption("profile") !~ "@askb"')
let g:airline_section_y = airline#section#create_right(['ffenc','db-profile'])



" BufExplorer
nnoremap <C-Tab> :BufExplorer<CR>j
augroup BUF_EXPLORER
  autocmd!
  autocmd BufEnter \[BufExplorer\] nmap <buffer> <TAB> o
  autocmd BufEnter \[BufExplorer\] nmap <buffer> <C-S-TAB> k
augroup END

" Undo tree
nnoremap <F9> :UndotreeToggle<cr>

" CtrlP
"set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.so,*.dll,*.class,*.jar,*.zip,*.xtendbin,*.war,*.ear,*.7z
set wildignore+=*.swp,*.zip,*.exe,*.so,*.dll,*.class,*.jar,*.zip,*.xtendbin,*.war,*.ear,*.7z,*.jpg,*.jpeg,*.png,*.git,*.pdf
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|target|bin)|target|sourceJarTemp|binJarTemp$',
  \ 'file': '\v\.(so)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" indentline
let g:indentLine_enabled = 0
nnoremap <silent> <F3> :IndentLinesToggle<CR>

" taglist-vim
let g:tlist_ant_settings='ant;p:project;t:target;m:macros'
nmap <silent> <F4>   :TlistToggle<CR>
nmap <silent> <S-F4> :TlistUpdate<CR>
nnoremap <silent> <leader>ot   :TlistOpen<CR>

" Snipmate
"" <TAB> mapped to <ESC>, so use Shift-TAB
"imap <S-TAB> <Plug>snipMateTrigger
let g:snipMate = {}
let g:snipMate.snippet_version=1
snoremap <BS> <BS>i

" dbext
let g:dbext_default_history_file=$HOME . '/.dbext-history.txt'
let g:dbext_default_history_size=1000
let g:dbext_default_history_max_entry=0

nnoremap <silent> <leader>sjs :DBJobStop<CR>
nnoremap <silent> <leader>es  :e $HOME/.dbext.sql<CR>


" TODO.txt
"
function! InitTODO()
  runtime TODO.vim
  "command! Align Tabular /+-\|+\|| \?/l0l0l0
""  nnoremap <silent> <space> mp:Align<cr>`p
  "nnoremap <silent> <Plug>OInCell :let save_lz = &lazyredraw<cr>:set lazyredraw<cr>T\|lmp<c-v>/\V+<cr>kkO<esc>t\|<c-v>`pdjPk:Align<cr>:let @/=""<cr>:let &lazyredraw = save_lz<cr>`p:silent! call repeat#set("\<Plug>OInCell", v:count)<CR>
  "nmap <leader>O <Plug>OInCell
endfunction

runtime smart-space.vim

" --------------- auto cmds
augroup MY
  autocmd!
  autocmd filetype ant   setlocal ts=4 sts=4 sw=4 noexpandtab iskeyword+=-,.
  autocmd filetype jproperties setlocal ts=4 sts=4 sw=4 noexpandtab iskeyword+=-,.

  autocmd Filetype c setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype cpp setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype xml setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype html setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype ruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype javascript setlocal ts=4 sts=4 sw=4 expandtab
  autocmd Filetype java setlocal ts=4 sts=4 sw=4 expandtab
  autocmd Filetype bash setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype json setlocal ts=4 sts=4 sw=4 noexpandtab
  " autocmd Filetype vim nnoremap <buffer> <SPACE> :execute getline(".")<CR>

  autocmd BufWritePost $MYVIMRC                    source $MYVIMRC
  autocmd BufWritePost $HOME/.vimrc_local-after    source $HOME/.vimrc_local-after

  autocmd BufNewFile,BufRead *.ahk			  setf autohotkey
  autocmd BufNewFile,BufRead TODO.txt			call InitTODO()
augroup END




" --------------- My stuff

function! AddToRegister(group)
  call setreg(v:register, getreg() . submatch(a:group), 'l')
  return submatch(0)
endfunction

function! YankAllMatched(...) range
  if a:0 == 0
    let l:group=0
  else
    let l:group=a:1
  endif
  call setreg(v:register, '', 'c')
  execute a:firstline . ',' . a:lastline . 's//\=AddToRegister(' . l:group . ')/g'
endfunction

" Copy all matched text to the specified register. Use as an optional
" argument a regex matching group.
command! -nargs=? -range=% YankAllMatched <line1>,<line2>call YankAllMatched(<args>)

" Highlighting

highlight mygroup1 ctermbg=blue guibg=blue
highlight mygroup2 ctermbg=green guibg=brown
highlight mygroup3 ctermbg=darkgreen guibg=darkgreen

function! MatchGroup(index, pattern)
  execute a:index . 'match myGroup' . a:index . ' /' . a:pattern . '/'
endfunction
function! MatchGroupV(index)
  let l:old = @"
  execute "normal! gvy"
  let l:pattern = '\V' . @"
  let @"=l:old
  call MatchGroup(a:index, l:pattern)
endfunction

fun! TabularizeRegion()
  let l:reg_start = line(".") + 1
  let l:start_line = getline(".")
  
  let l:tab_end = search('TABEND:', 'n')
  if l:tab_end > 0 && l:tab_end > l:reg_start
    let l:reg_stop = l:tab_end - 1
    let l:tab_params = substitute(l:start_line, '\V\.\*TAB: \(/\.\*\)', '\1', '')
    execute l:reg_start . "," . l:reg_stop "Tabularize " . l:tab_params
  endif
endfun
fun! TabularizeRegions()
  let l:winview = winsaveview()
  let l:old_pos = getpos(".")
  let l:line = line("$")
  while l:line > 0 && l:line > line("$") - 5
    if getline(l:line) =~ 'ENABLE_' . 'AUTOTAB'
      execute "g/TAB:/call TabularizeRegion()"
      break
    endif
    let l:line = l:line - 1
  endwhile
  call winrestview(l:winview)
  call setpos('.', l:old_pos)
endfun
augroup TAB_REGS
  autocmd!
  autocmd BufWritePre * call TabularizeRegions()
  autocmd InsertLeave * call TabularizeRegions()
augroup END


nnoremap <silent> 1m :call MatchGroup(1, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 2m :call MatchGroup(2, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 3m :call MatchGroup(3, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 1M :call MatchGroup(1, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 2M :call MatchGroup(2, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 3M :call MatchGroup(3, '\V' . escape(expand("<cword>"), '\'))<cr>

vnoremap <silent> 1m <ESC>:call MatchGroupV(1)<cr>
vnoremap <silent> 2m <ESC>:call MatchGroupV(2)<cr>
vnoremap <silent> 3m <ESC>:call MatchGroupV(3)<cr>


nnoremap <silent> 1<c-m> :1match<cr>
nnoremap <silent> 2<c-m> :2match<cr>
nnoremap <silent> 3<c-m> :3match<cr>

noremap gV `[v`]
map q: :q

" Redmine table aligner
command! -range=% AlignRedmineTable <line1>,<line2>Tabularize /.[^|]*\zs|

" ---- C++ ----

" Enter GUI (Generate GUIDd: https://www.guidgen.com/)
command! PasteGUID execute "normal! i// {\<esc>\"+pA}\<esc>o\<esc>SDEFINE_GUID(\<c-r>+);\<esc>0f-x;x;x;xF(a, 0x\<esc>8l.4l.4l.2l.2l.2l.2l.2l.2l.2l.F(l"


command! ConvertToPLSQL execute "normal! vipU:'<,'>s/\\V\\^\\/\\$//e\<cr>`<vip\<esc>`<I'\<esc>`>A';\<esc>`<IEXECUTE IMMEDIATE \<esc>"

nnoremap <silent> <F1> :cnext<CR>
nnoremap <silent> <S-F1> :cprevious<CR>

nnoremap <F5> :diffupdate<CR>
vnoremap <F5> <ESC>:diffupdate<CR>

" Edit .vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>ea :e $HOME/.vimrc_local-after<CR>

" System clipboard
vnoremap <leader>y "+y
nnoremap <leader>p "+p

" Edit TODO
nnoremap <leader>et :e ~\Desktop\TODO.txt<CR>

nnoremap <leader>da :bd#<CR>

" Uncomment large block with -u
nmap <silent> <leader>u vaC<leader>cu
let g:NERDDefaultAlign='left'

" Prevent vim from closing. Map :q => :close
cabbrev q <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'close' : 'q')<CR>

" Russian
set keymap=russian-jcuken-z
map! <C-S-SPACE> <C-^>
set imsearch=-1
set iminsert=0

" Colors

hi String guifg=#727272

if !empty(glob("$HOME/.vimrc_local-after"))
   source $HOME/.vimrc_local-after
endif

" let
" @i='?<<<<<<<V/|||||||"aynV/======="bynV/>>>>>>>"cy:tabnew:vsplit:vsplit"apl:enew"bpl:enew"cp:diffthish:diffthish:diffthis:g/<<<<<\||||||\|=====\|>>>>>/dl:g//dl:g//d'

" vim: set ts=2 sts=2 sw=2 expandtab:
"
