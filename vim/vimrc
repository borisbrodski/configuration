set hidden

" Mapping overview
" <leader>nn  -  NERDTree
" <leader>nf  -  NERDTreeFind
" Ctrl-n      -  multi-cursor
" Ctrl-x/p    -  multi-cursor (skip/back)
" F1/Shift-F1 -  cn/cp
" F3          -  indent lines toggle
" F4          -  taglist toggle
" Shift-F4    -  taglist update
" F6          -  highlight current toggle. See also 1-9m
" F9          -  undo tree
"
" Space       -  smart-space.vim
"
"
" <leader>ev  - edit .vimrc
" <leader>et  - edit ~/Desktop/TODO.txt
" <leader>es  - edit ~/sql/default.sql
" <leader>da  - delete alternative buffer
" <leader>ot  - open tag list
"
" <leader>dt  - diffthis
" <leader>do  - diffoff
" <leader>du  - diffupdate
" <leader>dp  - diffput
" <leader>dg  - diffget
"
" <leader>ym  - Yank last message into "
" <leader>pm  - Paste last message
"
" <leader>xc  - XML - append close tag
"
" Fs/Fi/Fd    - fold search
"
"
" Ctrl-Shift-Space - Change language
"
" Ctrl-f      - Match table's next `|´ in insert mode
"
" DrawIt
"   -di       - Start
"   -ds       - Stop
"   -b, -e, -l, ...
"
" :YankAllMatched - Copy all matches to "
" :SumAllMatched  - Sum matched numbers (support range, save reg, match-group)
"
" 1-9m        - highlight CWORD/visual with style 'mygroup<index>'
" 1-9<c-m>    - clear the highlighting
"
" Edit from slow network share
" - FromSlowNetwork
"
"
" DB (vim-sql-workbench)
" Connect: :CtrlPSW
" - <leader><ctrl>+2  - execute current or selected query
" - <leader>ee        - execute entire file with alternative delimiters
"
"
" Cool text objects:
" - ic / ac      - comments
" - iö / aö / ib - camelcase
" - ii / ai      - intent based (for layout languages, like python, haskell)
" - ia / ai      - argument block
"
" EasyAlign
" ga - start
" <Ctrl>+P - live
" <Ctrl>+G - ignore groups, like comments
" <Ctrl>+X - enter regex, repeat - execute align in live mode


if !exists("g:reload_count")
  let g:reload_count=1
else
  let g:reload_count+=1
endif
if !has("python")
  let g:pathogen_disabled = [
  \ "vim-javacomplete2"
  \ ]
else
  augroup VIM_JAVA_COMPLETE2
    autocmd FileType java setlocal omnifunc=javacomplete#Complete
  augroup END
endif
let g:pathogen_disabledXXX = [
 \ "argtextobj.vim",
 \ "autohotkey-ahk",
 \ "bufexplorer",
 \ "camelcasemotion",
 \ "ctrlp.vim",
 \ "dbext.vim",
 \ "DrawIt",
 \ "fugitive",
 \ "incsearch.vim",
 \ "indentline",
 \ "matchit.zip",
 \ "nerdcommenter",
 \ "nerdtree",
 \ "tabular",
 \ "taglist.vim",
 \ "tlib_vim",
 \ "undotree",
 \ "vim-colors-solarized",
 \ "vim-surround",
 \ "vim-textobj-comment",
 \ "vim-textobj-line",
 \ "vim-textobj-user",
 \ "vim-vspec",
 \ "vimtex",
 \ "vim-multiple-cursors",
 \ "vim-repeat",
 \ "vim-snipmate",
 \ "vim-snippets",
 \ "vim-sql-workbench",
 \
 \ "vim-addon-mw-utils",
 \ "vim-exchange",
 \ "vim-foldsearch",
 \ "vim-indent-object",
 \ "xmledit",
 \ "vim-airline-themes",
 \ "vim-airline",
 \ ""]
let g:pathogen_disabled = [
 \ ]

let $LANG='C'
if has('win32')
  language english
  " Slow randering :(
  " set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
else
  language en_US.UTF-8
endif
set langmenu=en_US.UTF-8


if !empty(glob("$HOME/.vimrc_local-before"))
  source $HOME/.vimrc_local-before
endif


let mapleader="-"
let maplocalleader="ü"

execute pathogen#infect()
Helptags
if g:reload_count == 1
  " BUG? Reexecuting this turns syntax highlighting off
  syntax enable
endif

if has('gui_running')
  colorscheme solarized
  " set guioptions-=T  " no toolbar
  if has('win32')
    set encoding=UTF-8
    au GUIEnter * simalt ~x
  endif
  set background=dark
  hi CursorLine guibg=#002b36
  hi Normal guibg=#001618
  set cursorline
else
  set background=light
endif
filetype plugin indent on

" TEST IT
set encoding=UTF-8

" Stop VIM beeping on errors
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

" Set GUI font
" :redir @a
" :set gfn?
" :redir END
if has('win32')
  "set guifont=Consolas:h11:cANSI
  "set guifont=Droid_Sans_Mono_Dotted_for_Powe:h11:cANSI
  set guifont=DejaVu_Sans_Mono_for_Powerline:h10:cANSI
  "set guifont=Hack:h11:cANSI
endif
noremap <silent> <leader>nn :NERDTreeToggle<cr>
noremap <silent> <leader>nf :NERDTreeFind<cr>
let g:NERDDefaultAlign='left'

let g:NERDTreeIndicatorMap = {
	\ "Modified"  : ">",
	\ "Staged"    : "*",
	\ "Untracked" : "?",
	\ "Renamed"   : "=",
	\ "Unmerged"  : "#",
	\ "Deleted"   : "-",
	\ "Dirty"     : ">",
	\ "Clean"     : "$",
	\ "Unknown"   : "."
	\ }


if has("persistent_undo")
    set undodir='~/.vim/undodir/'
    set undofile
endif

if has('win32')
	set fileformats=dos
endif
set diffopt+=iwhite

set showmatch " Show matching brackets.
set ignorecase " Search ignoring case
set smartcase " Do smart case matching
set hlsearch
set incsearch
"set hidden

set mouse=a
set showcmd
set ruler
set laststatus=2
"set statusline=%F%m%r%h%w\ [%{&ff},%{&fileencoding}][%Y][\%03.3b,0x\%02.2B][%l/%L,%v]%p%%
set tag+=../tags
set nostartofline " leave my cursor where it was
set scrolloff=5 " Keep 5 lines (top/bottom) for scope
set showcmd " show the command being typed
set sidescrolloff=5 " Keep 5 lines at the size
"set lazyredraw " do not redraw while running macros
set wildchar=<Tab> wildmenu wildmode=full
set fileencodings+=utf-8,cp1252,latin1
set backspace=indent,eol,start
set history=1000
set matchpairs+=<:>
set modeline
set modelines=5
set number
set relativenumber
set ttimeoutlen=50

"set ssop-=folds      " do not store folds in the session

set backupdir=~/vimtmp
set directory=~/vimtmp

let g:tex_flavor='tex'

"set viewdir=~\.vim\views\   " Cause indent STOP working. VIM BUG??

nnoremap <silent> <c-right> :bn<cr>
nnoremap <silent> <c-left> :bp<cr>
"inoremap <TAB> <ESC>

" vim-airline
let g:airline_highlighting_cache=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#sw#enabled = 1
let g:airline_powerline_fonts = 1


if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols

" powerline symbols
let g:airline_left_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.crypt = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = 'Ξ'
let g:airline_symbols.notexists = 'Σ'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.readonly = ''
let g:airline_symbols.spell = 'Ω'
let g:airline_symbols.whitespace = '·'

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

fun! MyAirLine_DBProfile()
  let l:profile = dbext#DB_listOption("profile")
  let l:user = dbext#DB_listOption("user")
  let l:suffix = ''
  if l:profile != l:user && l:profile != (l:user . "_")
    let l:suffix = ' (' . l:user . ')'
  endif
  return l:profile . l:suffix
endfun
call airline#parts#define_function('db-profile', 'MyAirLine_DBProfile')
call airline#parts#define_minwidth('db-profile', 10)
call airline#parts#define_condition('db-profile', 'dbext#DB_listOption("profile") !~ "@askb"')
let g:airline_section_y = airline#section#create_right(['ffenc','db-profile'])


" CamelCaseMotion
call camelcasemotion#CreateMotionMappings('ö')
omap <silent> aö <Plug>CamelCaseMotion iw
xmap <silent> aö <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> iö <Plug>CamelCaseMotion_ie
xmap <silent> iö <Plug>CamelCaseMotion_ie


" BufExplorer
nnoremap <C-Tab> :BufExplorer<CR>j
augroup BUF_EXPLORER
  autocmd!
  autocmd BufEnter \[BufExplorer\] nmap <buffer> <TAB> o
  autocmd BufEnter \[BufExplorer\] nmap <buffer> <C-S-TAB> k
augroup END
let g:bufExplorerShowNoName=1

" Undo tree
nnoremap <F9> :UndotreeToggle<cr>

" CtrlP
"set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.so,*.dll,*.class,*.jar,*.zip,*.xtendbin,*.war,*.ear,*.7z
set wildignore+=*.swp,*.zip,*.exe,*.so,*.dll,*.class,*.jar,*.zip,*.xtendbin,*.war,*.ear,*.7z,*.jpg,*.jpeg,*.png,*.git,*.pdf
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|target|bin)|target|sourceJarTemp|binJarTemp$',
  \ 'file': '\v\.(so)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_match_current_file=1

" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
nmap *  <Plug>(incsearch-nohl-*)
nmap #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" indentline
let g:indentLine_enabled = 0
nnoremap <silent> <F3> :IndentLinesToggle<CR>

" taglist-vim
let g:tlist_ant_settings='ant;p:project;t:target;m:macros'
nmap <silent> <F4>   :TlistToggle<CR>
nmap <silent> <S-F4> :TlistUpdate<CR>
nnoremap <silent> <leader>ot   :TlistOpen<CR>

" Snipmate
"" <TAB> mapped to <ESC>, so use Shift-TAB
"imap <S-TAB> <Plug>snipMateTrigger
let g:snipMate = get(g:, 'snipMate', {}) " See https://github.com/garbas/vim-snipmate/issues/220
let g:snipMate.snippet_version=1
snoremap <BS> <BS>i

" dbext
let g:dbext_default_history_file=$HOME . '/.dbext-history.txt'
let g:dbext_default_history_size=1000
let g:dbext_default_history_max_entry=0

nnoremap <silent> <leader>sjs :DBJobStop<CR>
nnoremap <silent> <leader>es  :e $HOME/sql/default.sql<CR>
fun! DBSetUserAndPassword(name)
  execute "DBSetOption user=". a:name
  execute "DBSetOption passwd=". a:name
endfun
command! -nargs=1 DBSetUserAndPassword call DBSetUserAndPassword("<args>")

" vim-indentwise
let g:indentwise_suppress_keymaps=1
map ö- <Plug>(IndentWisePreviousLesserIndent)
map öö <Plug>(IndentWisePreviousEqualIndent)
map ö+ <Plug>(IndentWisePreviousGreaterIndent)
map ä- <Plug>(IndentWiseNextLesserIndent)
map ää <Plug>(IndentWiseNextEqualIndent)
map ä+ <Plug>(IndentWiseNextGreaterIndent)
map ö_ <Plug>(IndentWisePreviousAbsoluteIndent)
map ä_ <Plug>(IndentWiseNextAbsoluteIndent)
map ö% <Plug>(IndentWiseBlockScopeBoundaryBegin)
map ä% <Plug>(IndentWiseBlockScopeBoundaryEnd)



" TODO.txt
"
function! InitTODO()
  runtime TODO.vim
  "command! Align Tabular /+-\|+\|| \?/l0l0l0
""  nnoremap <silent> <space> mp:Align<cr>`p
  "nnoremap <silent> <Plug>OInCell :let save_lz = &lazyredraw<cr>:set lazyredraw<cr>T\|lmp<c-v>/\V+<cr>kkO<esc>t\|<c-v>`pdjPk:Align<cr>:let @/=""<cr>:let &lazyredraw = save_lz<cr>`p:silent! call repeat#set("\<Plug>OInCell", v:count)<CR>
  "nmap <leader>O <Plug>OInCell
endfunction

runtime smart-space.vim

" --------------- auto cmds
augroup MY
  autocmd!
  autocmd filetype ant   setlocal ts=4 sts=4 sw=4 noexpandtab iskeyword+=-,.
  autocmd filetype jproperties setlocal ts=4 sts=4 sw=4 noexpandtab iskeyword+=-,.

  autocmd Filetype c setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype cpp setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype sql setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype xml setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype html setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype ruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype javascript setlocal ts=4 sts=4 sw=4 expandtab
  autocmd Filetype java setlocal ts=4 sts=4 sw=4 expandtab
  autocmd Filetype bash setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype json setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd Filetype spec setlocal ts=4 sts=4 sw=4 ft=java noexpandtab
  autocmd Filetype xtend setlocal ts=4 sts=4 sw=4 ft=java noexpandtab
  " autocmd Filetype vim nnoremap <buffer> <SPACE> :execute getline(".")<CR>

  autocmd BufWritePost $MYVIMRC                    source $MYVIMRC
  autocmd BufWritePost $HOME/.vimrc_local-after    source $HOME/.vimrc_local-after

  autocmd BufNewFile,BufRead *.ahk			  setf autohotkey
  autocmd BufNewFile,BufRead TODO.txt			call InitTODO()
augroup END




" --------------- My stuff

function! AddToRegister(group)
  call setreg(v:register, getreg() . submatch(a:group), 'l')
  return submatch(0)
endfunction

function! YankAllMatched(...) range
  if a:0 == 0
    let l:group=0
  else
    let l:group=a:1
  endif
  call setreg(v:register, '', 'c')
  execute a:firstline . ',' . a:lastline . 's//\=AddToRegister(' . l:group . ')/g'
endfunction

" Copy all matched text to the specified register. Use as an optional
" argument a regex matching group.
command! -nargs=? -range=% YankAllMatched <line1>,<line2>call YankAllMatched(<args>)

" Highlighting
highlight MyCurrentWord  ctermbg=8 guibg=#08414f

highlight MyGroup1 ctermbg=blue guibg=blue
highlight MyGroup2 term=bold,reverse cterm=bold ctermfg=0 ctermbg=10 gui=bold guifg=bg guibg=LightGreen
highlight MyGroup3 ctermbg=darkgreen guibg=darkgreen
highlight MyGroup4 term=reverse ctermfg=0 ctermbg=14 gui=reverse guifg=#eee8d5 guibg=#073642
highlight MyGroup5 term=reverse gui=reverse guifg=#586e75
highlight MyGroup6 term=bold gui=bold guifg=#93a1a1 guibg=#002b36
highlight MyGroup7 term=standout gui=standout guifg=#6c71c4
highlight MyGroup8 term=bold cterm=bold ctermfg=241 ctermbg=136 gui=bold guifg=#657b83 guibg=#b58900
highlight MyGroup9 term=bold ctermfg=14 gui=bold,underline guifg=Yellow

function! MatchTextToPattern(text)
  if match(a:text, "\\n") != -1
    let l:pattern = substitute(a:text, '\v\n$', '\\$', '')
    let l:pattern = substitute(l:pattern, '\v^\s*', '\\s\\*', '')
    let l:pattern = substitute(l:pattern, '\n\s*', '\\n\\s\\*', 'g')
    let @a=l:pattern
    return '\V' . l:pattern
  endif
  return '\V' . a:text
endfunction
function! MatchGroupRemove(index)
  try
    call matchdelete(1000 + a:index)
  catch /^Vim\%((\a\+)\)\=:E803/
  endtry
endfunction
function! MatchGroup(index, pattern)
  call MatchGroupRemove(a:index)
  call matchadd("MyGroup" . a:index, a:pattern, a:index, 1000 + a:index)
endfunction
function! MatchGroupV(index)
  normal! gv
  let l:text = s:get_visual_selection()
  execute "normal! \<ESC>"
  let l:escaped = printf('%s', escape(l:text, '/\'))
  let l:pattern = MatchTextToPattern(l:escape)

  call MatchGroup(a:index, l:pattern)
endfunction

function! s:get_visual_selection()
  let l:winview = winsaveview()

  let l:quot_save = getreg('"')
  let l:quot_save_type = getregtype('"')

  let l:zero_save = getreg("0")
  let l:zero_save_type = getregtype("0")
  try
    normal! ygv
    return @"
  finally
    call setreg("0", l:zero_save, l:zero_save_type)
    call setreg('"', l:quot_save, l:quot_save_type)
    call winrestview(l:winview)
  endtry

    " Source: https://stackoverflow.com/questions/1533565/how-to-get-visually-selected-text-in-vimscript
    "" Why is this not a built-in Vim script function?!
    "let [line_start, column_start] = getpos("'<")[1:2]
    "let [line_end, column_end] = getpos("'>")[1:2]
    "echom line_start . ":" . column_start . " -> " . line_end . ":" . column_end
    "let lines = getline(line_start, line_end)
    "if len(lines) == 0
    "    return ''
    "endif
    "let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    "let lines[0] = lines[0][column_start - 1:]
    "return join(lines, "\n")
endfunction

function!s:getHighlightCurrentON()
  return get(b:, 'HighlightCurrentON', 0)
endfunction
function!s:setHighlightCurrentON(newValue)
  let b:HighlightCurrentON = newValue
endfunction
function! HighlightCurrent()
  if !s:getHighlightCurrentON()
    return
  endif
  if mode() ==? "v"
    let l:text = s:get_visual_selection()
    let l:pattern = printf('%s', escape(l:text, '/\'))
  else
    let l:text = expand('<cword>')
    let l:pattern = printf('\<%s\>', escape(l:text, '/\'))
  endif
  let l:pattern = MatchTextToPattern(l:pattern)
  execute "2match MyCurrentWord /" . l:pattern . "/"
endfunction
function! HighlightCurrentToggle()
  let b:HighlightCurrentON = !s:getHighlightCurrentON()
  if b:HighlightCurrentON
    call HighlightCurrent()
  else
    execute "2match"
  endif
endfunction

nnoremap <silent> <F6> :call HighlightCurrentToggle()<CR>
vnoremap <silent> <F6> :<C-U>call HighlightCurrentToggle()<CR>gv
augroup HIGHLIGHT_CURRENT
  autocmd!
  autocmd CursorMoved * silent call HighlightCurrent()
augroup END
function! HighlightCurrentTimer(id)
  let b:highlight_old_mode = get(b:, 'highlight_old_mode', '')
  let b:visual_start = get(b:, 'visual_start', [0,0,0,0])
  let b:visual_end = get(b:, 'visual_end', [0,0,0,0])
  if b:highlight_old_mode !=# mode() || b:visual_start != getpos("'<'") || b:visual_end != getpos("'>'")
    silent call HighlightCurrent()
    let b:highlight_old_mode = mode()
    let b:visual_start = getpos("'<'")
    let b:visual_end = getpos("'>'")
  endif
endfunction
if get(g:, 'highlight_timer_id', 0)
  call timer_stop(g:highlight_timer_id)
endif
let g:highlight_timer_id = timer_start(100, function('HighlightCurrentTimer'), {'repeat': -1})

nnoremap <silent> 1m :call MatchGroup(1, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 2m :call MatchGroup(2, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 3m :call MatchGroup(3, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 4m :call MatchGroup(4, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 5m :call MatchGroup(5, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 6m :call MatchGroup(6, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 7m :call MatchGroup(7, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 8m :call MatchGroup(8, '\<' . expand("<cword>") . '\>')<cr>
nnoremap <silent> 9m :call MatchGroup(9, '\<' . expand("<cword>") . '\>')<cr>

nnoremap <silent> 1M :call MatchGroup(1, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 2M :call MatchGroup(2, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 3M :call MatchGroup(3, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 4M :call MatchGroup(4, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 5M :call MatchGroup(5, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 6M :call MatchGroup(6, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 7M :call MatchGroup(7, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 8M :call MatchGroup(8, '\V' . escape(expand("<cword>"), '\'))<cr>
nnoremap <silent> 9M :call MatchGroup(9, '\V' . escape(expand("<cword>"), '\'))<cr>

vnoremap <silent> 1m :<C-U>call MatchGroupV(1)<cr>
vnoremap <silent> 2m :<C-U>call MatchGroupV(2)<cr>
vnoremap <silent> 3m :<C-U>call MatchGroupV(3)<cr>
vnoremap <silent> 4m :<C-U>call MatchGroupV(4)<cr>
vnoremap <silent> 5m :<C-U>call MatchGroupV(5)<cr>
vnoremap <silent> 6m :<C-U>call MatchGroupV(6)<cr>
vnoremap <silent> 7m :<C-U>call MatchGroupV(7)<cr>
vnoremap <silent> 8m :<C-U>call MatchGroupV(8)<cr>
vnoremap <silent> 9m :<C-U>call MatchGroupV(9)<cr>


nnoremap <silent> 1<c-m> :call MatchGroupRemove(1)<cr>
nnoremap <silent> 2<c-m> :call MatchGroupRemove(2)<cr>
nnoremap <silent> 3<c-m> :call MatchGroupRemove(3)<cr>
nnoremap <silent> 4<c-m> :call MatchGroupRemove(4)<cr>
nnoremap <silent> 5<c-m> :call MatchGroupRemove(5)<cr>
nnoremap <silent> 6<c-m> :call MatchGroupRemove(6)<cr>
nnoremap <silent> 7<c-m> :call MatchGroupRemove(7)<cr>
nnoremap <silent> 8<c-m> :call MatchGroupRemove(8)<cr>
nnoremap <silent> 9<c-m> :call MatchGroupRemove(9)<cr>

" Relative line numbers in insert mode
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber number
augroup END

fun! TabularizeRegion()
  let l:reg_start = line(".") + 1
  let l:start_line = getline(".")
  
  let l:tab_end = search('TABEND:', 'n')
  if l:tab_end > 0 && l:tab_end > l:reg_start
    let l:reg_stop = l:tab_end - 1
    let l:tab_params = substitute(l:start_line, '\V\.\*TAB: \(/\.\*\)', '\1', '')
    execute l:reg_start . "," . l:reg_stop "Tabularize " . l:tab_params
  endif
endfun
fun! TabularizeRegions()
  let l:winview = winsaveview()
  let l:old_pos = getpos(".")
  let l:line = line("$")
  while l:line > 0 && l:line > line("$") - 5
    if getline(l:line) =~ 'ENABLE_' . 'AUTOTAB'
      execute "g/TAB:/call TabularizeRegion()"
      break
    endif
    let l:line = l:line - 1
  endwhile
  call winrestview(l:winview)
  call setpos('.', l:old_pos)
endfun
augroup TAB_REGS
  autocmd!
  autocmd BufWritePre * call TabularizeRegions()
  autocmd InsertLeave * call TabularizeRegions()
augroup END

" @ in Visual mode from Drew Neil
" https://github.com/stoeffel/.dotfiles/blob/master/vim/visual-at.vim
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" Put next table's pipe `|´ to match the previous line
fun! JumpToCharAtPreviousLine(c)
  if line('.') > 1
    let l:line_prev = getline(line('.') - 1)
    let l:line_curr = getline(line('.'))
    let l:char_pos_curr = strchars(strpart(l:line_curr, 0, getpos('.')[2]))

    if strchars(l:line_prev) <= l:char_pos_curr
      return ""
    endif

    let l:pos_prev = strlen(strcharpart(l:line_prev, 0, l:char_pos_curr))
    let l:c_idx = stridx(l:line_prev, a:c, l:pos_prev)
    if l:c_idx == -1
      return ""
    endif
    let l:char_pos_prev = strchars(strpart(l:line_prev, 0, l:c_idx))
    return repeat(' ', l:char_pos_prev - l:char_pos_curr) . a:c
  endif
  return ""
endfun
imap <c-f>  <c-r>=JumpToCharAtPreviousLine('\|')<cr>


noremap gV `[v`]
map q: :q

" Redmine table aligner
command! -range=% AlignRedmineTable <line1>,<line2>Tabularize /.[^|]*\zs|

" Plugin: https://github.com/junegunn/vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ---- C++ ----

" Enter GUI (Generate GUIDd: https://www.guidgen.com/)
command! PasteGUID execute "normal! i// {\<esc>\"+pA}\<esc>o\<esc>SDEFINE_GUID(\<c-r>+);\<esc>0f-x;x;x;xF(a, 0x\<esc>8l.4l.4l.2l.2l.2l.2l.2l.2l.2l.F(l"


command! ConvertToPLSQL execute "normal! vipU:'<,'>s/\\V\\^\\/\\$//e\<cr>`<vip\<esc>`<I'\<esc>`>A';\<esc>`<IEXECUTE IMMEDIATE \<esc>"

nnoremap <silent> <F1> :cnext<CR>
nnoremap <silent> <S-F1> :cprevious<CR>

" Diff mode
nnoremap <leader>dt :diffthis<CR>
nnoremap <leader>do :diffoff<CR>
nnoremap <leader>du :diffupdate<CR>
nnoremap <leader>dp :.diffput<CR>
nnoremap <leader>dg :.diffget<CR>
vnoremap <leader>dt <ESC>:diffthis<CR>
vnoremap <leader>do <ESC>:diffoff<CR>
vnoremap <leader>du <ESC>:diffupdate<CR>
vnoremap <leader>dp :diffput<CR>
vnoremap <leader>dg :diffget<CR>

" Update
nnoremap <silent> <F5> :if &diff \| diffupdate \| echo "Diff updated" \| else \| syntax sync fromstart \| echo "Syntax updated" \| endif<CR>

" Edit .vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>ea :e $HOME/.vimrc_local-after<CR>


" Edit TODO
nnoremap <leader>et :e ~\Desktop\TODO.txt<CR>

nnoremap <leader>da :bd#<CR>
nnoremap <leader>dd :b#<CR>:bd#<CR>

" Diff mappings
nnoremap <leader>cf :/\V\^\(<<<<<<< \\|=======\$\\|>>>>>>> \\|\|\|\|\|\|\|\| \)<CR>
nnoremap <leader>cd :g/\V\^\(<<<<<<< \\|=======\$\\|>>>>>>> \\|\|\|\|\|\|\|\| \)/d<CR>
vnoremap <silent> <leader>cf :<c-u>let @/='\V\^\(<<<<<<< \\|=======\$\\|>>>>>>> \\|\|\|\|\|\|\|\| \)'<CR>gvn
vnoremap <silent> <leader>cF :<c-u>let @/='\V\^\(<<<<<<< \\|=======\$\\|>>>>>>> \\|\|\|\|\|\|\|\| \)'<CR>gvN

" Uncomment large block with -u
nmap <silent> <leader>u vaC<leader>cu

" Yank last message to the buffer
nnoremap  <leader>ym :let @"=""<cr>:redir @"<cr>:1message<cr>:redir END<cr>:let @"=substitute(@", '\V\^\n\+', '', '')<cr>
nmap  <leader>pm <leader>myp

" XML mappings
augroup XMLmappings
  autocmd!
  autocmd FileType ant nnoremap <leader>xc a</<c-x><c-o><esc>
  autocmd FileType xml nnoremap <leader>xc a</<c-x><c-o><esc>
augroup END

" Sum matches
function! SumNumbers(...) range
  let l:matchingGroup = (a:0 >= 1) ? a:1 : 0
  let l:reg = (a:0 >= 2) ? a:2[0] : '"'
  let b:sumNumbersCount = 0
  fun! Sum(matchingGroup)
    let b:sumNumbersCount = b:sumNumbersCount + submatch(a:matchingGroup)
  endfun
  silent!  execute a:firstline . "," . a:lastline . "s//\\=Sum(" . l:matchingGroup . ")/gn"
  execute "let @" . l:reg . "=" . b:sumNumbersCount
  echo "Total: " . b:sumNumbersCount . " (putted in register " . l:reg . ")"
endfun
" Sum matched numbers
" :<range>SumAllMatched [regex-group] [register]
command! -nargs=* -range=% SumAllMatched <line1>,<line2>call SumNumbers(<f-args>)

" Prevent vim from closing. Map :q => :close
cabbrev q <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'close' : 'q')<CR>

" Russian
set keymap=russian-jcuken-z
map! <C-S-SPACE> <C-^>
set imsearch=-1
set iminsert=0

" Colors

hi String guifg=#727272

" FromSlowNetwork

fun! FromSlowNetwork()
  if !exists("b:OrigPath")
    let b:OrigPath = expand("%")
    let l:alt = @#
    execute "0file!"
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    let @#=l:alt
  endif
endfun
fun! SaveToSlowNetwork()
  if exists("b:OrigPath")
    " execute "write! " . b:OrigPath
    " execute "0file!"
    call writefile(getline(1,'$'), b:OrigPath)
  endif
endfun
command! FromSlowNetwork call FromSlowNetwork() 
" Save for FromSlowNetwork
cabbrev w <c-r>=(getcmdtype()==':' && getcmdpos()==1 && exists("b:OrigPath") ? 'call SaveToSlowNetwork()' : 'w')<CR>

" SQL-Workbench
let g:sw_config_dir=$HOME . '/.sqlworkbench'
"let g:sw_exe='<path-to-sql-workbench>/sql-workbench-build123/sqlwbconsole.cmd'
let g:sw_tmp=$HOME . '/.cache/sql-workbench/tmp'
let g:sw_cache=$HOME . '/.cache/sql-workbench'
let g:sw_log_to_file=1 " Write trace files
if !exists("g:ctrlp_extensions")
  let g:ctrlp_extensions=[]
endif
call add(g:ctrlp_extensions, "sw_profiles")
"fun! SwRefresh()
"  call sw#profiles#update('')
"  SWSqlBufferDisconnect
"  echo "Refreshed"
"endfun
"command! SwRefresh call SwRefresh()
"command! CtrlPSW call ctrlp#init(ctrlp#sw_profiles#id())
vmap <leader><c-@> :<c-u>SWSqlExecuteSelected<cr>

" Execute entire file with alternative delimiters
nmap <leader>ee :execute 'w \| SWInclude!'<cr><cr>


nmap <leader>see :execute 'w \| SWInclude!'<cr><cr>
vmap <leader>ses :<c-u>SWSqlExecuteSelected<cr>
nmap <leader>soi :SWSqlObjectInfo<cr>
nmap <leader>sos :SWSqlObjectSource<cr>
nmap <leader>se :SWSqlExecute<cr>
nmap <leader>sda :call sw#sqlwindow#execute_sql('SELECT * FROM ' . expand('<cword>') . ';')<cr>
nmap <leader>sdc :call sw#sqlwindow#execute_sql('SELECT COUNT(1) FROM ' . expand('<cword>') . ';')<cr>


" : vim-autoexec :
fun! VimAutoExec()
  let l:old_query = getreg('/')
  let l:reg = getreg('"')
  let l:winview = winsaveview()
  let l:old_pos = getpos(".")
  silent! global/\V:vim_exec:/execute eval('"' . substitute(substitute(getline('.'), '\V\^\.\*:vim\[_]exec:\[[:space:]]\*', '', ''), '\V"', '\\"', 'g') . '"')
  call winrestview(l:winview)
  call setpos('.', l:old_pos)
  call setreg('/', l:old_query)
  call setreg('"', l:reg)
endfun
augroup VIM_AUTOEXEC
  autocmd!
  autocmd BufWritePre * call VimAutoExec()
augroup END


if !empty(glob("$HOME/.vimrc_local-after"))
   source $HOME/.vimrc_local-after
endif

" let
" @i='?<<<<<<<V/|||||||"aynV/======="bynV/>>>>>>>"cy:tabnew:vsplit:vsplit"apl:enew"bpl:enew"cp:diffthish:diffthish:diffthis:g/<<<<<\||||||\|=====\|>>>>>/dl:g//dl:g//d'


" vim: set ts=2 sts=2 sw=2 expandtab:
"
