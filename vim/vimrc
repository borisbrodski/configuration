" Use runtime! my.vim to use other files

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
runtime macros/matchit.vim

if has('win32')
	source $HOME/vimfiles/bundle/snipmate/plugin/snipMate.vim
	"source $HOME/vimfiles/bundle/snipmate/autoload/snipMate.vim
	call GetSnippets("C:/Users/brodski.boris/vimfiles/bundle/snipmate/snippets", "tex")
	call GetSnippets("C:/Users/brodski.boris/vimfiles/snippets/", "ant")
endif

" Start maximized
au GUIEnter * simalt ~x

"set encoding=utf-8

" --------------------------------------------------------------------------------
" COLORS
" --------------------------------------------------------------------------------
" Coole Schemata
"colorscheme torte
colorscheme asu1dark
"colorscheme borland

" Mode Indication -Prominent!
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=blue
    " set cursorcolumn
  elseif a:mode == 'r'
    hi statusline guibg=red
  else
    hi statusline guibg=#ee44bb
  endif
endfunction

function! InsertLeaveActions()
  hi statusline guibg=#336600
  set nocursorcolumn
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * call InsertLeaveActions()

" to handle exiting insert mode via a control-C
inoremap <c-c> <c-o>:call InsertLeaveActions()<cr><c-c>
hi statusline guibg=green

function! MatchGroup(index, pattern)
  highlight mygroup1 ctermbg=blue guibg=blue
  highlight mygroup2 ctermbg=green guibg=brown
  execute a:index . 'match myGroup' . a:index . ' /' . a:pattern . '/'
endfunction

nmap 1m :call MatchGroup(1, '\<' . expand("<cword>") . '\>')<cr>
nmap 2m :call MatchGroup(2, '\<' . expand("<cword>") . '\>')<cr>
nmap 1M :call MatchGroup(1, '\V' . escape(expand("<cword>"), '\'))<cr>
nmap 2M :call MatchGroup(2, '\V' . escape(expand("<cword>"), '\'))<cr>
nmap 1<c-m> :1match<cr>
nmap 2<c-m> :2match<cr>

" --------------------------------------------------------------------------------

" Fix back space in normal mode
nmap <BS> X
nmap <f3> <c-]>
nmap <c-w><f3> <c-w><c-]>
nmap <c-w>m <c-w>\| <c-w>_
nmap <silent> <space> <c-f>
nmap <silent> <s-space> <c-b>
vmap <silent> <space> <c-f>
vmap <silent> <s-space> <c-b>

imap <silent> <c-space> <esc>:execute "normal l"<cr>a
imap <silent> <c-s-space> <esc>i
nmap <silent> <c-w>c :bprevious<cr>:bd #<cr>
nmap <silent> <C-PageDown> :bnext<CR>
nmap <silent> <C-PageUp> :bprevious<CR>
nnoremap <C-Tab> :BufExplorer<CR>j
nmap <silent> <m-o>   :let a=@" \| execute "normal! m'o" \| execute "normal! S" \| execute "normal! `'" \| let @"=a<CR>
nmap <silent> <m-s-o> :let a=@" \| execute "normal! m'O" \| execute "normal! S" \| execute "normal! `'" \| let @"=a<CR>

imap ^ <esc>
imap ° <c-r>='^'<cr>

nmap <silent> <c-t> :execute "normal! \<c-a>"<cr>

" Alt-Shift-R - Rename word under curser or search pattern
nmap <m-s-r> :%s/\C\<<c-r>=expand("<cword>")<cr>\>/<c-r>=expand("<cword>")<cr>/g<left><left>
vmap <m-s-r> :s/\C<c-r>=@/<cr>/<c-r>=substitute(@/,'\W*\(\w\+\).*', '\1', 'g')<cr>/g<left><left>


" Fix stopsel behavior in Visual Mode
"vnoremap <Left> h
"vnoremap <Right> l
"vnoremap <Up> k
"vnoremap <Down> j
"vnoremap <Home> 0
"vnoremap <End> $

nnoremap <S-M-Left> <C-W>h
nnoremap <S-M-l> <C-W>h
nnoremap <S-M-Right> <C-W>l
nnoremap <S-M-h> <C-W>l
nnoremap <S-M-Up> <C-W>k
nnoremap <S-M-k> <C-W>k
nnoremap <S-M-Down> <C-W>j
nnoremap <S-M-j> <C-W>j

" --------------- RAILS
set nocompatible
syntax on
filetype plugin indent on
"helptags ~/.vim/doc

" --------------- LATEX
" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
" set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
" (Already set above)
" filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" --------------- CommantT
let g:CommandTMaxFiles=100000
let g:CommandTMaxDepth=50
set wildignore+=*.class,.git,*.jar,*.ear

let mapleader=','
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ve :Exec substitute(getline('.'), '\r$', "", 'g')<cr>
map <c-s-tab>    :CommandTBuffer<CR>
map <c-t>      :let g:CommandTInitString='' \| CommandT<cr>
map <m-t>      :let g:CommandTInitString=expand("<cword>") \| CommandT<cr>

" Comment out for java
map <silent> <leader>cj :Exec "normal 0i//"<cr>

" Comment out for ruby
map <silent> <leader>cr :Exec "normal 0i#"<cr>

" Comment out for vim
map <silent> <leader>cv :Exec 'normal 0i"'<cr>

" Source the vimrc file after saving it
"if has("autocmd")
"  autocmd bufwritepost .vimrc source $MYVIMRC
"endif
nmap <leader>vv :tabedit $MYVIMRC<CR>

map <C-Up> <C-Y>
map <C-Down> <C-E>

map <C-k> <C-Y>
map <C-j> <C-E>
map <silent> <c-h> <Plug>CamelCaseMotion_b
map <silent> <c-l> <Plug>CamelCaseMotion_w
omap <silent> <c-h> <Plug>CamelCaseMotion_ib
xmap <silent> <c-h> <Plug>CamelCaseMotion_ib
omap <silent> <c-l> <Plug>CamelCaseMotion_iw
xmap <silent> <c-l> <Plug>CamelCaseMotion_iw
"map <c-h> <plug>IMAP_JumpForward
nmap <silent> <m-7> :let @/=""<CR>

"Map ctrl+n to toggle NERDtree
nmap <silent> <c-n> :NERDTreeToggle<CR>
nmap <silent> <m-o> :TlistOpen<CR>
"nmap <silent> <c-c> :FufCoverageFile<CR>
"nmap <silent> <c-t> :FufTag<CR>
nmap <silent> g<c-t> :FufTagWithCursorWord<CR>

autocmd FileType rb imap <buffer> <c-f> => 
autocmd FileType erb imap <buffer> <c-f> => 
nmap <c-a> ggVG

autocmd FileType vim setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType tex setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
"autocmd FileType latex setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType cpp setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType java setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType jsp setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType xml setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType ant setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType ant setlocal iskeyword+=.
autocmd FileType ant setlocal iskeyword+=-
autocmd FileType jproperties setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType jproperties setlocal iskeyword+=.
autocmd FileType jproperties setlocal iskeyword+=-
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType CUCUMBER setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab

autocmd FileType tex nmap  m'0i%<esc>`'
autocmd FileType tex vmap  normal m'0i%<esc>`'


hi SpellBad term=reverse ctermbg=2
hi SpellCap term=reverse ctermbg=2
hi SpellRare term=reverse ctermbg=2
hi SpellLocal term=reverse ctermbg=2

" INVISIBLES
" Shortcut to rapidly toggle `set list`
nmap <leader>i :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

"Invisible character colors
highlight NonText guifg=#444444
highlight NonText guibg=#11001E
highlight SpecialKey guifg=#444444
highlight SpecialKey guibg=#11001E
" highlight NonText guifg=#dadae9
" highlight SpecialKey guifg=#dadae9

vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
nnoremap <Tab> >>
nnoremap <S-Tab> <<

nmap <c-p> :execute "normal! 1\<c-i>"<cr>


" function! Paste(mode)
"   if a:mode == "v"
"     normal gv
"     normal "+P
"     normal l
"   elseif a:mode == "i"
"     set virtualedit=all
"     normal `^"+gP
"     let &virtualedit = ""
"   endif
" endfunction

vnoremap <C-X> "+d
vnoremap <C-C> "+y
vnoremap <C-V> "+p
"inoremap <C-V> <C-O>:call Paste("i")<CR>
nnoremap <C-V> "+gPl
" vnoremap <C-V> :<C-U>call Paste("v")<CR>
vmap P "0p

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Bubble single lines
nmap <A-Up> [e
nmap <A-k> [e
nmap <A-Down> ]e
nmap <A-j> ]e

" Bubble multiple lines
vmap <A-Up> [egv
vmap <A-k> [egv
vmap <A-Down> ]egv
vmap <A-j> ]egv

" Copy current line
nmap <silent> <C-A-Up> "-yyP
nmap <silent> <C-A-Down> "-yyp
nmap <silent> <C-A-k> <C-A-Up>
nmap <silent> <S-A-k> <C-A-Up>
nmap <silent> <C-A-j> <C-A-Down>
nmap <silent> <S-A-j> <C-A-Down>

" Copy current lines
vmap <silent> <C-A-Up> <Esc>'<V'>"-y'>"-pgv
vmap <silent> <C-A-Down> <Esc>'<V'>"-y"-Pgv
vmap <silent> <C-A-k> <C-A-Up>
vmap <silent> <C-A-j> <C-A-Down>
vmap <silent> <S-A-k> <C-A-Up>
vmap <silent> <S-A-j> <C-A-Down>

function! PutRegFilledToRange() range
  let l:fill = ''
  let l:lines = getreg()
  let l:lineStart = 0
  let l:linesLen = strlen(l:lines)
  let l:lineIndex = 0
  let l:linesNeeded = a:lastline - a:firstline + 1
  while l:lineIndex < l:linesNeeded 
    let l:lineEnd = matchend(l:lines, "\n\\|$", l:lineStart)
    let l:line = strpart(l:lines, l:lineStart, l:lineEnd - l:lineStart)
    if l:lines[l:lineEnd - 1] != "\n" 
      let l:line = l:line . "\n"
    endif
    let l:fill = l:fill . l:line
    let l:lineStart = l:lineEnd < l:linesLen ? l:lineEnd : 0
    let l:lineIndex = l:lineIndex + 1
  endwhile

  normal gv
  " This probably does not make much sense in any mode
  " other than block modes, but we will try to cope.
  if mode() == "\<C-V>" || mode() == "\<C-S>"
    let l:newMode = "\<C-V>"
  elseif mode() == 'v' || mode() == 's'
    let l:newMode = 'v'
  else
    let l:newMode = 'V'
  endif
  let l:origReg = getreg('')
  let l:origRegType = getregtype('')
  try
    call setreg('', l:fill, l:newMode)
    execute 'normal ' . v:count1 . 'p'
  finally
    call setreg('', l:origReg, l:origRegType)
  endtry
endfunction
vmap _f :call PutRegFilledToRange()<CR>

function! PutRegBeforeOrAfter(move) range
  execute "normal gv" . a:move . getreg(v:register) . "\<c-c>"
endfunction
vmap _I :call PutRegBeforeOrAfter('I')<CR>
vmap _A :call PutRegBeforeOrAfter('A')<CR>

function! FillInc() range
  let l:fill = ''
  let l:lineIndex = 0
  let l:linesNeeded = a:lastline - a:firstline + 1
  if getreg() =~ "[0-9]\+"
    let l:count = 0 + getreg()
  else
    let l:count = 1
  endif
  while l:lineIndex < l:linesNeeded
    let l:fill = l:fill . l:count . "\n"
    let l:count = l:count + 1
    let l:lineIndex = l:lineIndex + 1
  endwhile

"  echo l:fill
  normal gv
  " This probably does not make much sense in any mode
  " other than block modes, but we will try to cope.
  if mode() == "\<C-V>" || mode() == "\<C-S>"
    let l:newMode = "\<C-V>"
  elseif mode() == 'v' || mode() == 's'
    let l:newMode = 'v'
  else
    let l:newMode = 'V'
  endif
  let l:origReg = getreg('')
  let l:origRegType = getregtype('')
  try
    call setreg('', l:fill, l:newMode)
    execute 'normal ' . v:count1 . 'p'
  finally
    call setreg('', l:origReg, l:origRegType)
  endtry
endfunction

vmap _c :call FillInc()<CR>

"""" Copy matches of the last search to a register (default is the clipboard).
"""" Accepts a range (default is whole file).
"""" 'CopyMatches'   copy matches to clipboard (each match has \n added).
"""" 'CopyMatches x' copy matches to register x (clears register first).
"""" 'CopyMatches X' append matches to register x.
"""" We skip empty hits to ensure patterns using '\ze' don't loop forever.
"""command! -range=% -register CopyMatches call s:CopyMatches(<line1>, <line2>, '<reg>')
"""function! s:CopyMatches(line1, line2, reg)
"""  let hits = []
"""  for line in range(a:line1, a:line2)
"""    let txt = getline(line)
"""    let idx = match(txt, @/)
"""    while idx >= 0
"""      let end = matchend(txt, @/, idx)
"""      if end > idx
"""	call add(hits, strpart(txt, idx, end-idx))
"""      else
"""	let end += 1
"""      endif
"""      if @/[0] == '^'
"""        break  " to avoid false hits
"""      endif
"""      let idx = match(txt, @/, end)
"""    endwhile
"""  endfor
"""  if len(hits) > 0
"""    let reg = empty(a:reg) ? '+' : a:reg
"""    execute 'let @'.reg.' = join(hits, "\n") . "\n"'
"""  else
"""    echo 'No hits'
"""  endif
"""endfunction
"""
"""" Use 0"+y0 to clear the clipboard, then
""""    :g/pattern/call CopyMultiMatches()
"""" to copy all multiline hits (just the matching text).
"""" This is for when the match extends over multiple lines.
"""" Only the first match from each line is found.
"""" BUG: When searching for "^function.*\_s*let" the '.*' stops at the end
"""" of a line, but it greedily skips "\n" in the following (we copy too much).
"""function! CopyMultiMatches()
"""  let text = join(getline(".", "$"), "\n") . "\n"
"""  let @+ .= matchstr(text, @/) . "\n"
"""endfunction


" Remove all text except what matches the current search result
" The opposite of :%s///g (which clears all instances of the current search.
" Note: Clobbers the c register
function! ClearAllButMatches()
    let old = @c
    let @c=""
    %s//\=setreg('C', submatch(0), 'l')/g
    %d _
    put c
    0d _
    let @c = old
endfunction

function! AddToRegister(group)
  call setreg(v:register, getreg() . submatch(a:group), 'l')
  return submatch(0)
endfunction

function! YankAllMatched(...) range
  if a:0 == 0
    let l:group=0
  else
    let l:group=a:1
  endif
  call setreg(v:register, '', 'c')
  execute a:firstline . ',' . a:lastline . 's//\=AddToRegister(' . l:group . ')/g'
endfunction

" Copy all matched text to the specified register. Use as an optional
" argument a regex matching group.
command! -nargs=? -range=% YankAllMatched <line1>,<line2>call YankAllMatched(<args>)


" --------------------------------------------------------------------------------
" JAVA
" --------------------------------------------------------------------------------

nmap ga _f lvt;F h"tyf;hvT "ny][Opublic "tpa get"npT lllvUA() {return pa;}public void setpT lllvUA("tpa "npa) {this."npa = "npa;}


function! GetBufferList()
    return filter(range(1,bufnr('$')), 'buflisted(v:val)')
endfunction
function! Xor(a, b)
  return (a:a && !a:b) || (!a:a && a:b)
endfunction
function! GetMatchingBuffers(pattern, allbut)
    return filter(GetBufferList(), 'Xor(substitute(bufname(v:val), "\\\\", "/", "g") =~ a:pattern, a:allbut == "!")')
endfunction

function! ProcessMatchingBuffers(op, opdescr, pattern, allbut)
    let l:p = substitute(a:pattern, '\\', '/', 'g')
    let l:p = '\V\^' . l:p . '\$'
    let l:p = substitute(l:p, '\*', '\\.\\*', 'g')
    let l:p = substitute(l:p, '?', '\\.', 'g')
"     echo "'" . l:p . "'"
    let l:matchList = GetMatchingBuffers(l:p, a:allbut)

    let l:count = len(l:matchList)
    if l:count < 1
        echo 'No buffers found matching pattern ' . a:pattern
        return
    endif

    if l:count == 1
        let l:suffix = ''
    else
        let l:suffix = 's'
    endif

    exec a:op . ' ' . join(l:matchList, ' ')
    echo join(l:matchList, "\n")
    echo a:opdescr . ' ' . l:count . ' buffer' . l:suffix . '.'
endfunction

command! -nargs=1 -bang -complete=buffer BW call ProcessMatchingBuffers('bw', 'Wiped', '<args>', '<bang>')
command! -nargs=1 -bang -complete=buffer BD call ProcessMatchingBuffers('bd', 'deleted', '<args>', '<bang>')



autocmd FileType CUCUMBER inoremap <silent> <Bar>     <Bar><Esc>:call <SID>align()<CR>a
autocmd FileType CUCUMBER nmap <silent> <Bar>     :call <SID>align()<CR>a
"autocmd FileType CUCUMBER inoremap <silent> <space>   <space><Esc>:call <SID>align()<CR>a
 
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

nmap <silent> <F1> :cn<CR>
nmap <silent> <S-F1> :cp<CR>
imap <F1> <ESC><F1>
imap <S-F1> <ESC><S-F1>

nmap <silent> <F2> :tn<CR>
nmap <silent> <S-F2> :tp<CR>
imap <F2> <ESC><F2>
imap <S-F2> <ESC><S-F2>

nnoremap <F9> :GundoToggle<CR>

function! MyExec(cmd)
  execute a:cmd
endfunction

command! -nargs=1 -range Exec <line1>,<line2>call MyExec(<args>)

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

set directory=~/.vim/tmp " directory to place swap files in
set showmatch " Show matching brackets.
set ignorecase " Search ignoring case
set smartcase " Do smart case matching
set hlsearch
set incsearch
set hidden
set mouse=a
set selectmode=
set mousemodel=popup
set keymodel=startsel ",stopsel
set selection=old
set backspace=indent,eol,start
set whichwrap+=<,>,[,]
"set cpoptions+=$
set showcmd
set ruler
set laststatus=2
set statusline=%F%m%r%h%w\ [%{&ff},%{&fileencoding}][%Y][\%03.3b,0x\%02.2B][%l/%L,%v]%p%%
set tag+=../tags
set nostartofline " leave my cursor where it was
set scrolloff=5 " Keep 5 lines (top/bottom) for scope
set showcmd " show the command being typed
set sidescrolloff=5 " Keep 5 lines at the size
"set lazyredraw " do not redraw while running macros
set wildchar=<Tab> wildmenu wildmode=full

highlight Folded term=standout ctermfg=11 ctermbg=8 guifg=Cyan guibg=#222222
highlight FoldColumn term=standout ctermfg=11 ctermbg=8 guifg=Cyan guibg=#222222
set foldcolumn=3

set foldenable " Turn on folding
set foldmarker={,} " Fold C style code (only use this as default
                    " if you use a high foldlevel)
"set foldmethod=marker " Fold on the marker
set foldmethod=syntax " Fold on the marker
set foldlevel=100 " Don't autofold anything (but I can still
                  " fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag " what movements
set visualbell t_vb=

" No menus and no toolbar
"set guioptions-=m  
set guioptions-=T

function! SimpleFoldText() " {
    return getline(v:foldstart).' '
endfunction " }
set foldtext=SimpleFoldText() " Custom fold text function
                               " (cleaner than default)

if filereadable($HOME . "/.vimrc_local")
  source $HOME/.vimrc_local
endif

